# -*- coding: utf-8 -*-
"""AlgoTrading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lnzbzSr9F8j-mUDU_bsuGrkGda4JXoOv
"""

!pip install yfinance
!pip install ta
import yfinance as yf
import pandas as pd
import numpy as np
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator, EMAIndicator
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

# Download historical stock data (example: AAPL)
df = yf.download("AAPL", start="2020-01-01", end="2024-01-01")

# Corrected Feature Engineering
df["SMA_10"] = SMAIndicator(df["Close"].squeeze(), window=10).sma_indicator()
df["EMA_10"] = EMAIndicator(df["Close"].squeeze(), window=10).ema_indicator()
df["RSI"] = RSIIndicator(df["Close"].squeeze(), window=14).rsi()

# Target: 1 if tomorrow’s close > today’s close, else 0
df["Target"] = np.where(df["Close"].shift(-1) > df["Close"], 1, 0)

# Remove NaN
df.dropna(inplace=True)

# Remove any rows with NaN (simplest fix)
df.dropna(inplace=True)

# Recreate features and target
X = df[["SMA_10", "EMA_10", "RSI"]]
y = df["Target"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Model Training
model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Simulated Trading Strategy
df_test = df.iloc[len(X_train):].copy()
df_test["Pred_Signal"] = y_pred
df_test["Daily_Return"] = df_test["Close"].pct_change()
df_test["Strategy_Return"] = df_test["Daily_Return"] * df_test["Pred_Signal"]

# Cumulative Returns
(1 + df_test[["Daily_Return", "Strategy_Return"]]).cumprod().plot(figsize=(12,6))
plt.title("Buy & Hold vs ML Strategy Returns")
plt.show()

